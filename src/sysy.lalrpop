use crate::frontend::ast::*;

// lalrpop 里的约定
grammar;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  // 跳过 /* */ 多行注释
  r"/\*[\s\S]*\*/" => {},
  // 剩下的情况采用默认方式处理
  _
}

// 定义 CompUnit, 其返回值类型为 String
// parser 在解析完成后的行为是返回 FuncDef 的值
pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

// 同上, 不解释
FuncDef: FuncDef = {
  <func_type: FuncType> <id: Ident> "(" ")" <block: Block> => {
    FuncDef { func_type, ident: id, block }
  }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <block_items: (BlockItem)*> "}" => Block { block_items };

Stmt: Stmt = {
    <lval: LVal> "=" <exp: Exp> ";" => Stmt::Assign(lval, exp),
    <exp: (Exp)?> ";" => Stmt::Exp(exp),
    <block: Block> => Stmt::Block(block),
    "return" <exp: Exp> ";" => Stmt::Ret(exp),
}

Exp: Exp = <lor_exp: LOrExp> => Exp { lor_exp };

UnaryExp: UnaryExp = {
    <exp: PrimaryExp> => UnaryExp::PrimaryExpression(exp),
    // + 的一元运算什么都不做
    "+" <exp: UnaryExp> => UnaryExp::UnaryExpression(Box::new(exp)),
    <op: UnaryOp> <exp: UnaryExp> => UnaryExp::UnaryOpAndExp(op, Box::new(exp))
}

UnaryOp: UnaryOp = {
    "-" => UnaryOp::Neg,
    "!" => UnaryOp::Not
}

PrimaryExp: PrimaryExp = {
    "(" <exp: Exp> ")" => PrimaryExp::Expression(Box::new(exp)),
    <lval: LVal> => PrimaryExp::LValue(lval),
    <number: Number> => PrimaryExp::Number(number)
}

Number: i32 = <num: IntConst> => num;

// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}

// MulExp ::= UnaryExp | MulExp ("*" | "/" | "%") UnaryExp;
MulExp: MulExp = {
    <exp: UnaryExp> => MulExp::Unary(exp),
    <mul: MulExp> <op: MulAndDivAndModOp> <unary: UnaryExp> => MulExp::Mul(
            Box::new(mul),
            op,
            unary
        )
}

// AddExp ::= MulExp | AddExp ("+" | "-") MulExp;
AddExp: AddExp = {
    <exp: MulExp> => AddExp::Mul(exp),
    <add: AddExp> <op: AddAndSubOp> <mul: MulExp> => AddExp::Add(
           Box::new(add),
           op,
           mul
        )
}

AddAndSubOp: BinaryOp = {
    "+" => BinaryOp::Add,
    "-" => BinaryOp::Sub,
}

MulAndDivAndModOp: BinaryOp = {
    "*" => BinaryOp::Mul,
    "/" => BinaryOp::Div,
    "%" => BinaryOp::Mod,
}

// RelExp ::= AddExp | RelExp ("<" | ">" | "<=" | ">=") AddExp;
RelExp: RelExp = {
    <add: AddExp> => RelExp::Add(add),
    <rel: RelExp> <op: CompareOp> <add: AddExp> => RelExp::Rel(Box::new(rel), op, add)
}

// EqExp ::= RelExp | EqExp ("==" | "!=") RelExp;
EqExp: EqExp = {
    <rel: RelExp> => EqExp::Rel(rel),
    <eq: EqExp> <op: EqAndNEqOp> <rel: RelExp> => EqExp::Eq(Box::new(eq), op, rel)
}

// LAndExp ::= EqExp | LAndExp "&&" EqExp;
LAndExp: LAndExp = {
    <eq: EqExp> => LAndExp::Eq(eq),
    <and: LAndExp> "&&" <eq: EqExp> => LAndExp::And(Box::new(and), eq)
}

// LOrExp ::= LAndExp | LOrExp "||" LAndExp;
LOrExp: LOrExp = {
    <and: LAndExp> => LOrExp::And(and),
    <or: LOrExp> "||" <and: LAndExp> => LOrExp::Or(Box::new(or), and)
}

EqAndNEqOp: BinaryOp = {
    "==" => BinaryOp::Eq,
    "!=" => BinaryOp::Neq
}

CompareOp: BinaryOp = {
    "<" => BinaryOp::Lt,
    ">" => BinaryOp::Gt,
    "<=" => BinaryOp::Le,
    ">=" => BinaryOp::Ge
}

Decl: Decl = {
    <const_decl: ConstDecl> => Decl::Const(const_decl),
    <var_decl: VarDecl> => Decl::Var(var_decl)
}

ConstDecl: ConstDecl = {
    "const" BType <def0: ConstDef> <mut constdef: ("," <ConstDef>)*> ";" => {
        constdef.insert(0, def0);
        ConstDecl { const_defs: constdef }
     }
}

BType: String = "int" => <>.to_string();

ConstDef: ConstDef = {
    <ident: Ident> "=" <val: ConstInitVal> => ConstDef { ident, val }
}

ConstInitVal: ConstInitVal = {
    <exp: ConstExp> => ConstInitVal { exp }
}

BlockItem: BlockItem = {
    <decl: Decl> => BlockItem::Declare(decl),
    <stmt: Stmt> => BlockItem::Statement(stmt)
}

LVal: LVal = <ident: Ident> => LVal { ident };

ConstExp: ConstExp = <exp: Exp> => ConstExp { exp };

VarDecl: VarDecl = BType <def0: VarDef> <mut defs: ("," <VarDef>)*> ";" => {
    defs.insert(0, def0);
    VarDecl { defs }
};

VarDef: VarDef = {
    <ident: Ident> => VarDef::NotInit { ident },
    <ident: Ident> "=" <val: InitVal> => VarDef::Init { ident, val }
}

InitVal: InitVal = <exp: Exp> => InitVal { exp };